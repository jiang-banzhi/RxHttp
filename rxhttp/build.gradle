apply plugin: rootProject.ext.plugins.library

apply plugin: rootProject.ext.bintray.dcendents
apply plugin: rootProject.ext.bintray.bintray

version = rootProject.ext.bintray.version

group = rootProject.ext.bintray.group
android {
    compileSdkVersion 26
    resourcePrefix "rxhttp_"
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation rootProject.ext.dependencies.retrofit
    implementation rootProject.ext.dependencies.converter_gson
    implementation rootProject.ext.dependencies.adapter_rxjava2
    implementation rootProject.ext.dependencies.rxjava2
    implementation rootProject.ext.dependencies.rxandroid2
    implementation rootProject.ext.dependencies.gson
    implementation 'com.squareup.okhttp3:logging-interceptor:3.5.0'
}


install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                // Add your description here
                name 'retrofit2 + rxjava 封装'    //项目描述
                description "retrofit2 + rxjava 封装"
                url rootProject.ext.bintray.siteUrl
                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id rootProject.ext.bintray.developerId       //填写的一些基本信息
                        name rootProject.ext.bintray.developerName
                        email rootProject.ext.bintray.developerEmail
                    }
                }
                scm {
                    connection rootProject.ext.bintray.gitUrl
                    developerConnection rootProject.ext.bintray.gitUrl
                    url rootProject.ext.bintray.siteUrl
                }
            }
        }
    }
}
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    options.encoding = "UTF-8"
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    user = BINTRAY_USER
    key = BINTRAY_KEY
//    user = properties.getProperty("bintray.user")
//    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        //userOrg = "0306" //指定路径
        repo = rootProject.ext.bintray.bintrayRepo //这个仓库必须在指定路径下，必须在网页上创建成功，否则还是无法找到 repo
        name = rootProject.ext.bintray.bintrayName   //发布到JCenter上的项目名字
        websiteUrl = rootProject.ext.bintray.siteUrl
        vcsUrl = rootProject.ext.bintray.gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}
